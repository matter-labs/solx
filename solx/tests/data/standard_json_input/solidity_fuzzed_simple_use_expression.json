{
  "language": "Solidity",
  "sources": {
    "target.sol": {
      "content": "\n        pragma solidity ^0.8.19;\n        \n        \n        contract vaqsoEkzJ3A35uUb {\n            address public state_var_0 = address(0x0000000000000000000000000000000000000000);\nint16 public state_var_1 = int16(-3);\nuint64 public state_var_2 = uint64(68);\n\n        function VPnrn2kjR8HlSL(int256 assert_in2, bool assert_in3, int256 assert_in4) external  returns (int256) {\n            \n            return ((assert_in2 /  (assert_in3 ? int256(68) : assert_in4)) %  assert_in2);\n        }\n        \n        }\n        \n\n        contract PlaceholderContract {\n            \n        function VPnrn2kjR8HlSL(int256 assert_in2, bool assert_in3, int256 assert_in4) internal  returns (int256) {\n            \n            return ((assert_in2 /  (assert_in3 ? int256(68) : assert_in4)) %  assert_in2);\n        }\n        \n\n        function vMNweLbsuKKiaQB4fc8D3(int256 assert_in0, int256 assert_in1, bool assert_in3, int256 assert_in4, bool assert_in5) internal  returns (int256) {\n            \n            return (((assert_in5 &&  assert_in3) ||  (assert_in3 &&  assert_in5)) ? ((assert_in1 -  assert_in0) *  (int256(537) *  int256(849))) : (assert_in0 +  (assert_in3 ? assert_in4 : assert_in4)));\n        }\n        \n\n        function mGXLYjQ23CK7Onb4(int256 assert_in2, bool assert_in3, int256 assert_in4) internal  returns (int256) {\n            \n            return ((((assert_in2 /  (assert_in3 ? (((int256(68) -  int256(0)) -  int256(0)) *  int256(1)) : assert_in4)) -  int256(75)) +  int256(75)) %  assert_in2);\n        }\n        \n\n        function $joPlA3NjMz6GFgqlipWRxuntdOJq(int256 assert_in0, int256 assert_in1, int256 assert_in2, bool assert_in3, int256 assert_in4, bool assert_in5) internal  returns (int256) {\n            \n            return (mGXLYjQ23CK7Onb4(assert_in2, assert_in3, assert_in4) /  (((int256(0) *  ((((int256(1) -  int256(43)) +  int256(43)) &  ((int256(1) +  (- int256(43))) +  int256(43))) /  int256(1))) +  ((- ((- ((! ((! (assert_in5 &&  assert_in3)) &&  (! (true &&  (assert_in5 &&  assert_in3))))) ? ((((assert_in1 +  (int256(0) -  (assert_in0 +  int256(0)))) |  int256(0)) *  (int256(537) *  (int256(849) -  (int256(0) |  int256(0))))) &  (((assert_in1 +  (- (assert_in0 +  int256(0)))) |  int256(0)) *  ((int256(537) &  int256(537)) *  (int256(849) -  int256(0))))) : (- (- ((- (- (assert_in0 &  ((assert_in0 -  int256(68)) +  int256(68))))) +  ((! ((! false) &&  (! (assert_in3 ||  false)))) ? assert_in4 : assert_in4)))))) &  (- ((! (! ((assert_in3 ||  (! (! ((true &&  (assert_in5 &&  assert_in3)) ||  (true &&  (assert_in5 &&  assert_in3)))))) &&  (assert_in5 ||  (! (! (true &&  (assert_in5 &&  assert_in3)))))))) ? (((assert_in1 -  (int256(0) +  assert_in0)) |  int256(0)) *  (int256(537) *  (int256(849) -  (int256(0) |  int256(0))))) : ((- (- (assert_in0 &  assert_in0))) +  ((false ||  ((false ||  (assert_in3 ||  (assert_in3 ||  false))) ||  (false ||  (assert_in3 ||  (assert_in3 ||  false))))) ? assert_in4 : assert_in4)))))) *  (((int256(1) +  (- int256(43))) +  int256(43)) &  ((int256(1) -  int256(43)) +  int256(43))))) +  (- int256(0))));\n        }\n        \n\n        function check_entrypoint(int256 assert_in0, int256 assert_in1, int256 assert_in2, bool assert_in3, int256 assert_in4, bool assert_in5) public  {\n            unchecked {\n            int256  assert_out1 = ((new vaqsoEkzJ3A35uUb()).VPnrn2kjR8HlSL(assert_in2, assert_in3, assert_in4) /  vMNweLbsuKKiaQB4fc8D3(assert_in0, assert_in1, assert_in3, assert_in4, assert_in5));\nint256  assert_out2 = $joPlA3NjMz6GFgqlipWRxuntdOJq(assert_in0, assert_in1, assert_in2, assert_in3, assert_in4, assert_in5);\nassert((assert_out1 ==  assert_out2));\n        }\n            \n        }\n        \n        }\n        \n        "
    }
  },
  "optimizer": {
    "mode": "z"
  },
  "settings": {
    "evmVersion": "petersburg",
    "viaIR": true,
    "outputSelection": {
      "*": {
        "*": [
          "evm.bytecode.object"
        ]
      }
    }
  }
}
