self,         path: String,         output_metadata: bool,         output_assembly: bool,         output_binary: bool,     ) -> anyhow::Result<()> {         writeln!(std::io::stdout(), "\n======= {path} =======")?;         if output_assembly {             writeln!(std::io::stdout(), "Assembly:\nTODO")?;         }         if output_metadata {             writeln!(std::io::stdout(), "Metadata:\n{}", self.metadata_json)?;         } @@ -96,7 +92,6 @@ impl Contract {         self,         output_path: &Path,         output_metadata: bool,         output_assembly: bool,         output_binary: bool,         overwrite: bool,     ) -> anyhow::Result<()> { @@ -133,25 +128,6 @@ impl Contract {             }         }          if output_assembly {             let output_name = format!(                 "{}.{}",                 self.name.name.as_deref().unwrap_or(file_name),                 "asm"             );             let mut output_path = output_path.clone();             output_path.push(output_name.as_str());              if output_path.exists() && !overwrite {                 anyhow::bail!(                     "Refusing to overwrite an existing file {output_path:?} (use --overwrite to force)."                 );             } else {                 std::fs::write(output_path.as_path(), "TODO".as_bytes())                     .map_err(|error| anyhow::anyhow!("File {output_path:?} writing: {error}"))?;             }         }          if output_binary {             let output_name = format!(                 "{}.{}", ‎solx/src/build_evm/mod.rsCopy file name to clipboardExpand all lines: solx/src/build_evm/mod.rs+5-11Original file line numberDiff line numberDiff line change @@ -94,27 +94,23 @@ impl Build {     pub fn write_to_terminal(         mut self,         output_metadata: bool,         output_assembly: bool,         output_binary: bool,     ) -> anyhow::Result<()> {         self.take_and_write_warnings();         self.exit_on_error();          if !output_metadata && !output_assembly && !output_binary {         if !output_metadata && !output_binary {             writeln!(                 std::io::stderr(),                 "Compiler run successful. No output requested. Use flags --metadata, --asm, --bin."                 "Compiler run successful. No output requested. Use flags `--bin` and `--metadata`."             )?;             return Ok(());         }          for (path, build) in self.results.into_iter() {             build.expect("Always valid").write_to_terminal(                 path,                 output_metadata,                 output_assembly,                 output_binary,             )?;             build                 .expect("Always valid")                 .write_to_terminal(path, output_metadata, output_binary)?;         }          Ok(()) @@ -127,7 +123,6 @@ impl Build {         mut self,         output_directory: &Path,         output_metadata: bool,         output_assembly: bool,         output_binary: bool,         overwrite: bool,     ) -> anyhow::Result<()> { @@ -140,7 +135,6 @@ impl Build {             build.expect("Always valid").write_to_directory(                 output_directory,                 output_metadata,                 output_assembly,                 output_binary,                 overwrite,             )?; ‎solx/src/solx/arguments.rsCopy file name to clipboardExpand all lines: solx/src/solx/arguments.rs+2-6Original file line numberDiff line numberDiff line change @@ -63,7 +63,7 @@ pub struct Arguments {      /// Pass arbitrary space-separated options to LLVM.     /// The argument must be a single-quoted string following a `=` separator.     /// Example: `--llvm-options='-eravm-jump-table-density-threshold=10'`. TODO: update     /// Example: `--llvm-options='arg1 arg2 arg3 ... argN'`.     #[arg(long)]     pub llvm_options: Option<String>,  @@ -120,10 +120,6 @@ pub struct Arguments {     #[arg(long)]     pub metadata_literal: bool,      /// Output assembly of the compiled contracts.     #[arg(long = "asm")]     pub output_assembly: bool,      /// Output metadata of the compiled project.     #[arg(long = "metadata")]     pub output_metadata: bool, @@ -253,7 +249,7 @@ impl Arguments {         }          if self.standard_json.is_some() {             if self.output_assembly || self.output_metadata || self.output_binary {             if self.output_metadata || self.output_binary {                 messages.push(solx_solc::StandardJsonOutputError::new_error(                     "Cannot output data outside of JSON in standard JSON mode.",                     None, ‎solx/src/solx/main.rsCopy file name to clipboardExpand all lines: solx/src/solx/main.rs+1-6Original file line numberDiff line numberDiff line change @@ -202,16 +202,11 @@ fn main_inner(         build.write_to_directory(             &output_directory,             arguments.output_metadata,             arguments.output_assembly,             arguments.output_binary,             arguments.overwrite,         )?;     } else {         build.write_to_terminal(             arguments.output_metadata,             arguments.output_assembly,             arguments.output_binary,         )?;         build.write_to_terminal(arguments.output_metadata, arguments.output_binary)?;     }      Ok(()) ‎solx/src/yul/parser/statement/expression/function_call.rsCopy file name to clipboardExpand all lines: solx/src/yul/parser/statement/expression/function_call.rs-1Original file line numberDiff line numberDiff line change @@ -256,7 +256,6 @@ impl FunctionCall {             }             Name::Pop => {                 let _arguments = self.pop_arguments_llvm::<1>(context)?;                 // TODO                 Ok(None)             }  ‎solx/tests/cli/asm.rsCopy file name to clipboardExpand all lines: solx/tests/cli/asm.rs-38 Load DiffThis file was deleted.‎solx/tests/cli/general.rsCopy file name to clipboardExpand all lines: solx/tests/cli/general.rs+2-17Original file line numberDiff line numberDiff line change @@ -21,21 +21,14 @@ fn no_arguments() -> anyhow::Result<()> {     Ok(()) }  #[test_case(     crate::common::SOLIDITY_BIN_OUTPUT_NAME,     crate::common::SOLIDITY_ASM_OUTPUT_NAME )] fn multiple_output_options(     bin_output_file_name: &str,     asm_output_file_name: &str, ) -> anyhow::Result<()> { #[test_case(crate::common::SOLIDITY_BIN_OUTPUT_NAME)] fn multiple_output_options(bin_output_file_name: &str) -> anyhow::Result<()> {     crate::common::setup()?;     let tmp_dir = TempDir::new()?;     let args = &[         crate::common::TEST_SOLIDITY_CONTRACT_PATH,         "-O3",         "--bin",         "--asm",         "--output-dir",         tmp_dir.path().to_str().unwrap(),     ]; @@ -51,19 +44,11 @@ fn multiple_output_options(         .path()         .join(crate::common::TEST_SOLIDITY_CONTRACT_NAME)         .join(bin_output_file_name);     let asm_output_file = tmp_dir         .path()         .join(crate::common::TEST_SOLIDITY_CONTRACT_NAME)         .join(asm_output_file_name);      assert!(bin_output_file.exists());     assert!(asm_output_file.exists());     assert!(!crate::cli::is_file_empty(         bin_output_file.to_str().unwrap()     )?);     assert!(!crate::cli::is_file_empty(         asm_output_file.to_str().unwrap()     )?);      Ok(()) } ‎solx/tests/cli/mod.rsCopy file name to clipboardExpand all lines: solx/tests/cli/mod.rs-1Original file line numberDiff line numberDiff line change @@ -8,7 +8,6 @@ use assert_cmd::assert::OutputAssertExt; use assert_cmd::cargo::CommandCargoExt;  mod allow_paths; mod asm; mod base_path; mod bin; mod debug_output_dir; ‎solx/tests/cli/optimization.rsCopy file name to clipboardExpand all lines: solx/tests/cli/optimization.rs+3-3Original file line numberDiff line numberDiff line change @@ -5,9 +5,9 @@ use predicates::prelude::*; use test_case::test_case;  // TODO: #[test_case('0')] // TODO: #[test_case('1')] // TODO: #[test_case('2')] // TODO: #[test_case('0')] when -O0 is supported #[test_case('1')] #[test_case('2')] #[test_case('3')] #[test_case('s')] #[test_case('z')] ‎solx/tests/cli/output_dir.rsCopy file name to clipboardExpand all lines: solx/tests/cli/output_dir.rs+17-52Original file line numberDiff line numberDiff line change @@ -2,6 +2,8 @@ //! CLI tests for the eponymous option. //!  use std::path::PathBuf;  use predicates::prelude::*; use tempfile::TempDir; use test_case::test_case; @@ -29,61 +31,23 @@ fn default() -> anyhow::Result<()> {     Ok(()) }  // TODO: fix when Yul is fixed // #[test_case(era_compiler_common::EXTENSION_EVM_BINARY)] // fn yul(extension: &str) -> anyhow::Result<()> { //     crate::common::setup()?;  //     let tmp_dir_solx = TempDir::with_prefix("solx_output")?;  //     let input_path = PathBuf::from(crate::common::TEST_YUL_CONTRACT_PATH); //     let input_file = input_path //         .file_name() //         .expect("Always exists") //         .to_str() //         .expect("Always valid");  //     let args = &[ //         input_path.to_str().expect("Always valid"), //         "--yul", //         "--bin", //         "--output-dir", //         tmp_dir_solx.path().to_str().unwrap(), //     ];  //     let result = crate::cli::execute_solx(args)?; //     result //         .success() //         .stderr(predicate::str::contains("Compiler run successful"));  //     let output_file = tmp_dir_solx //         .path() //         .join(input_file) //         .join(format!("Test.{extension}")); //     assert!(output_file.exists());  //     Ok(()) // }  #[test_case(crate::common::SOLIDITY_ASM_OUTPUT_NAME)] fn asm_and_metadata(asm_file_name: &str) -> anyhow::Result<()> { #[test_case(era_compiler_common::EXTENSION_EVM_BINARY)] fn yul(extension: &str) -> anyhow::Result<()> {     crate::common::setup()?;      let tmp_dir_solx = TempDir::with_prefix("solx_output")?;      let mut asm_path = tmp_dir_solx.path().to_path_buf();     asm_path.push(crate::common::TEST_SOLIDITY_CONTRACT_NAME);     asm_path.push(asm_file_name);      let mut metadata_path = tmp_dir_solx.path().to_path_buf();     metadata_path.push(crate::common::TEST_SOLIDITY_CONTRACT_NAME);     metadata_path.push("Test_meta.json");     let input_path = PathBuf::from(crate::common::TEST_YUL_CONTRACT_PATH);     let input_file = input_path         .file_name()         .expect("Always exists")         .to_str()         .expect("Always valid");      let args = &[         crate::common::TEST_SOLIDITY_CONTRACT_PATH,         input_path.to_str().expect("Always valid"),         "--yul",         "--bin",         "--asm",         "--metadata",         "--output-dir",         tmp_dir_solx.path().to_str().unwrap(),     ]; @@ -93,10 +57,11 @@ fn asm_and_metadata(asm_file_name: &str) -> anyhow::Result<()> {         .success()         .stderr(predicate::str::contains("Compiler run successful"));      assert!(tmp_dir_solx.path().exists());      assert!(asm_path.exists());     assert!(metadata_path.exists());     let output_file = tmp_dir_solx         .path()         .join(input_file)         .join(format!("Return.{extension}"));     assert!(output_file.exists());      Ok(()) } ‎solx/tests/cli/overwrite.rsCopy file name to clipboardExpand all lines: solx/tests/cli/overwrite.rs-51Original file line numberDiff line numberDiff line change @@ -54,55 +54,6 @@ fn bin_missing() -> anyhow::Result<()> {     Ok(()) }  #[test] fn asm() -> anyhow::Result<()> {     crate::common::setup()?;      let tmp_dir_solx = TempDir::with_prefix("solx_output")?;      let args = &[         crate::common::TEST_SOLIDITY_CONTRACT_PATH,         "--asm",         "--output-dir",         tmp_dir_solx.path().to_str().unwrap(),         "--overwrite",     ];      let _ = crate::cli::execute_solx(args)?;     let result = crate::cli::execute_solx(args)?;     result         .success()         .stderr(predicate::str::contains("Compiler run successful"));      assert!(tmp_dir_solx.path().exists());      Ok(()) }  #[test] fn asm_missing() -> anyhow::Result<()> {     crate::common::setup()?;      let tmp_dir_solx = TempDir::with_prefix("solx_output")?;      let args = &[         crate::common::TEST_SOLIDITY_CONTRACT_PATH,         "--asm",         "--output-dir",         tmp_dir_solx.path().to_str().unwrap(),     ];      let _ = crate::cli::execute_solx(args)?;     let result = crate::cli::execute_solx(args)?;     result.failure().stderr(predicate::str::contains(         "Error: Refusing to overwrite an existing file",     ));      assert!(tmp_dir_solx.path().exists());      Ok(()) }  #[test] fn metadata() -> anyhow::Result<()> {     crate::common::setup()?; @@ -161,7 +112,6 @@ fn all() -> anyhow::Result<()> {     let args = &[         crate::common::TEST_SOLIDITY_CONTRACT_PATH,         "--bin",         "--asm",         "--metadata",         "--output-dir",         tmp_dir_solx.path().to_str().unwrap(), @@ -188,7 +138,6 @@ fn all_missing() -> anyhow::Result<()> {     let args = &[         crate::common::TEST_SOLIDITY_CONTRACT_PATH,         "--bin",         "--asm",         "--metadata",         "--output-dir",         tmp_dir_solx.path().to_str().unwrap(), ‎solx/tests/cli/standard_json.rsCopy file name to clipboardExpand all lines: solx/tests/cli/standard_json.rs+16-17Original file line numberDiff line numberDiff line change @@ -52,23 +52,22 @@ fn invalid_input_solc_error() -> anyhow::Result<()> {     Ok(()) }  // TODO: fix when recursion works with a static library // #[test] // fn recursion() -> anyhow::Result<()> { //     crate::common::setup()?;  //     let args = &[ //         "--standard-json", //         crate::common::TEST_SOLIDITY_STANDARD_JSON_SOLX_RECURSION_PATH, //     ];  //     let result = crate::cli::execute_solx(args)?; //     result //         .success() //         .stdout(predicate::str::contains("bytecode"));  //     Ok(()) // } #[test] fn recursion() -> anyhow::Result<()> {     crate::common::setup()?;      let args = &[         "--standard-json",         crate::common::TEST_SOLIDITY_STANDARD_JSON_SOLX_RECURSION_PATH,     ];      let result = crate::cli::execute_solx(args)?;     result         .success()         .stdout(predicate::str::contains("bytecode"));      Ok(()) }  #[test] fn invalid_path() -> anyhow::Result<()> { ‎solx/tests/cli/yul.rsCopy file name to clipboardExpand all lines: solx/tests/cli/yul.rs+43-54Original file line numberDiff line numberDiff line change @@ -4,57 +4,47 @@  use predicates::prelude::*;  // TODO: fix when Yul is fixed // #[test] // fn default() -> anyhow::Result<()> { //     crate::common::setup()?;  //     let args = &[crate::common::TEST_YUL_CONTRACT_PATH, "--yul"]; #[test] fn default() -> anyhow::Result<()> {     crate::common::setup()?;  //     let result = crate::cli::execute_solx(args)?; //     result.success().stderr(predicate::str::contains( //         "Compiler run successful. No output requested", //     ));     let args = &[crate::common::TEST_YUL_CONTRACT_PATH, "--yul"];  //     Ok(()) // }     let result = crate::cli::execute_solx(args)?;     result.success().stderr(predicate::str::contains(         "Compiler run successful. No output requested",     ));  // TODO: fix when Yul is fixed // #[test] // fn solc() -> anyhow::Result<()> { //     crate::common::setup()?;     Ok(()) }  //     let args = &[crate::common::TEST_YUL_CONTRACT_PATH, "--yul"]; #[test] fn solc() -> anyhow::Result<()> {     crate::common::setup()?;  //     let result = crate::cli::execute_solx(args)?; //     result.success().stderr(predicate::str::contains( //         "Compiler run successful. No output requested", //     ));     let args = &[crate::common::TEST_YUL_CONTRACT_PATH, "--yul"];  //     Ok(()) // }     let result = crate::cli::execute_solx(args)?;     result.success().stderr(predicate::str::contains(         "Compiler run successful. No output requested",     ));  // TODO: fix when Yul is fixed // #[test] // fn invalid_input() -> anyhow::Result<()> { //     crate::common::setup()?;     Ok(()) }  //     let args = &[crate::common::TEST_SOLIDITY_CONTRACT_PATH, "--yul"]; #[test] fn invalid_input() -> anyhow::Result<()> {     crate::common::setup()?;  //     let result = crate::cli::execute_solx(args)?; //     let solx_status = result //         .failure() //         .stderr(predicate::str::contains("Yul parsing")) //         .get_output() //         .status //         .code() //         .expect("No exit code.");     let args = &[crate::common::TEST_SOLIDITY_CONTRACT_PATH, "--yul"];  //     let solc_result = crate::cli::execute_solc(args)?; //     solc_result.code(solx_status);     let result = crate::cli::execute_solx(args)?;     result         .failure()         .stderr(predicate::str::contains("Yul parsing"));  //     Ok(()) // }     Ok(()) }  #[test] fn standard_json() -> anyhow::Result<()> { @@ -74,20 +64,19 @@ fn standard_json() -> anyhow::Result<()> {     Ok(()) }  // TODO: fix when Yul is fixed // #[test] // fn invalid_solc_error() -> anyhow::Result<()> { //     crate::common::setup()?; #[test] fn invalid_solc_error() -> anyhow::Result<()> {     crate::common::setup()?;  //     let args = &[ //         "--standard-json", //         crate::common::TEST_YUL_STANDARD_JSON_SOLC_INVALID_PATH, //     ];     let args = &[         "--standard-json",         crate::common::TEST_YUL_STANDARD_JSON_SOLC_INVALID_PATH,     ];  //     let result = crate::cli::execute_solx(args)?; //     result.success().stdout(predicate::str::contains( //         "DeclarationError: Function \\\"mdelete\\\" not found.", //     ));     let result = crate::cli::execute_solx(args)?;     result.success().stdout(predicate::str::contains(         "DeclarationError: Function \\\"mdelete\\\" not found.",     ));  //     Ok(()) // }     Ok(()) }‎solx/tests/common/const.rsCopy file name to clipboardExpand all lines: solx/tests/common/const.rs-3Original file line numberDiff line numberDiff line change @@ -45,9 +45,6 @@ pub const TEST_SOLIDITY_CONTRACT_INTERFACE_EMPTY_YUL_PATH: &str = /// A test input file. pub const SOLIDITY_BIN_OUTPUT_NAME: &str = "Test.bin";  /// A test input file. pub const SOLIDITY_ASM_OUTPUT_NAME: &str = "Test.asm";  /// A test input file. pub const TEST_YUL_CONTRACT_PATH: &str = "tests/data/contracts/yul/Test.yul";  ‎solx/tests/unit/mod.rsCopy file name to clipboardExpand all lines: solx/tests/unit/mod.rs+1-1Original file line numberDiff line numberDiff line change @@ -5,6 +5,6 @@ // mod ir_artifacts; // mod libraries; // mod linker; TODO: Fix the linker // mod optimizer; TODO: Fix the optimizer // mod optimizer; // mod remappings; TODO: Fix dependencies // mod standard_json;‎solx/tests/unit/optimizer.rsCopy file name to clipboardExpand all lines: solx/tests/unit/optimizer.rs-3Original file line numberDiff line numberDiff line change @@ -17,7 +17,6 @@ fn default(via_ir: bool) {         solx_solc::StandardJsonInputLibraries::default(),         era_compiler_common::HashType::Keccak256,         BTreeSet::new(),         &solx_solc::Compiler::LAST_SUPPORTED_VERSION,         via_ir,         era_compiler_llvm_context::OptimizerSettings::none(),     ) @@ -27,7 +26,6 @@ fn default(via_ir: bool) {         solx_solc::StandardJsonInputLibraries::default(),         era_compiler_common::HashType::Keccak256,         BTreeSet::new(),         &solx_solc::Compiler::LAST_SUPPORTED_VERSION,         via_ir,         era_compiler_llvm_context::OptimizerSettings::cycles(),     ) @@ -37,7 +35,6 @@ fn default(via_ir: bool) {         solx_solc::StandardJsonInputLibraries::default(),         era_compiler_common::HashType::Keccak256,         BTreeSet::new(),         &solx_solc::Compiler::LAST_SUPPORTED_VERSION,         via_ir,         era_compiler_llvm_context::OptimizerSettings::size(),     ) 
0 commit commentsComments0 (0)Lock conversationCommentSubscribeYou're not receiving notifications from this thread.
