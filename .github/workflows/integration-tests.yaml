name: Integration tests

on:
  pull_request:

concurrency:
  group: ${{ github.repository_id }}-${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

defaults:
  run:
    shell: "bash -ex {0}"

permissions:
  contents: read
  pull-requests: write

jobs:

  integration-tests:
    runs-on: matterlabs-ci-runner-high-performance
    container:
      image: ghcr.io/matter-labs/zksync-llvm-runner:latest
      options: -m 110g
    env:
      BOOST_PREFIX: ${{ github.workspace }}/era-solidity/boost/lib
      SOLC_PREFIX: ${{ github.workspace }}/era-solidity/build
    steps:
      - name: Checkout
        uses: actions/checkout@v5
        with:
          submodules: recursive

      - name: Checkout submodules
        run: |
          git config --global --add safe.directory '*'
          git submodule update --init --force --depth=1 --recursive --checkout

      - name: Building solc
        uses: ./.github/actions/build-solc
        with:
          cmake-build-type: RelWithDebInfo
          working-dir: 'era-solidity'
          upload-testing-binary: false
          build-type: ${{ matrix.type }}

      - name: Build LLVM
        uses: ./.github/actions/build-llvm
        with:
          build-type: 'RelWithDebInfo'
          enable-assertions: false
          ccache-key: 'llvm-Linux-X64-gnu'

      - name: Build tester
        run: cargo build --release --bin solx-tester

      - name: Build solx
        uses: ./.github/actions/build-rust
        with:
          exec_name: 'solx'
          build-type: 'release'
          target: 'x86_64-unknown-linux-gnu'

      - name: Run tests
        run: ./target/release/solx-tester --solx $(which solx)

  coverage:
    runs-on: matterlabs-ci-runner-high-performance
    container:
      image: ghcr.io/matter-labs/zksync-llvm-runner:latest
    env:
      BOOST_PREFIX: ${{ github.workspace }}/era-solidity/boost/lib
      SOLC_PREFIX: ${{ github.workspace }}/era-solidity/build
      PROFDATA_FILE: solx.profdata
      LCOV_FILE: codecov.lcov
      OUTPUT_HTML_DIR: COVERAGE
    steps:
      - name: Checkout
        uses: actions/checkout@v5
        with:
          submodules: recursive

      - name: Checkout submodules
        run: |
          git config --global --add safe.directory '*'
          git submodule update --init --force --depth=1 --recursive --checkout

      - name: Building solc
        uses: ./.github/actions/build-solc
        with:
          cmake-build-type: RelWithDebInfo
          working-dir: 'era-solidity'
          upload-testing-binary: false
          build-type: ${{ matrix.type }}

      - name: Build LLVM
        uses: ./.github/actions/build-llvm
        with:
          build-type: 'RelWithDebInfo'
          enable-assertions: false
          ccache-key: 'llvm-Linux-X64-gnu'
          enable-coverage: 'true'

      - name: Build tester
        run: cargo build --release --bin solx-tester

      - name: Build solx
        uses: ./.github/actions/build-rust
        with:
          exec_name: 'solx'
          build-type: 'release'
          enable-coverage: 'true'
          target: 'x86_64-unknown-linux-gnu'

      - name: Run integration tests
        run: |
          TMP="${PROFDATA_FILE}.tmp"
          for TEST_PATH in tests/solidity/complex/* tests/solidity/simple/*; do
          WORKDIR=$(basename ${TEST_PATH})
          mkdir -p "${GITHUB_WORKSPACE}/${WORKDIR}"
          ./target/release/solx-tester --solx $(which solx) --path ${TEST_PATH} --workflow build          
          mv *.profraw "${GITHUB_WORKSPACE}/${WORKDIR}/" || true
          du -hs "${GITHUB_WORKSPACE}/${WORKDIR}"
          find ${GITHUB_WORKSPACE}/${WORKDIR} -type f -name '*.profraw' -print > profiles.lst
          if [[ -f "${PROFDATA_FILE}" ]]; then
           llvm-profdata merge -sparse -num-threads="$(nproc)" -o "${TMP}" "${PROFDATA_FILE}" @profiles.lst
          else
           llvm-profdata merge -sparse -num-threads="$(nproc)" -o "${TMP}" @profiles.lst
          fi
          mv -f "${TMP}" "${PROFDATA_FILE}"
          rm -rf "${GITHUB_WORKSPACE}/${WORKDIR}"
          done

      - name: Run unit tests
        uses: ./.github/actions/rust-unit-tests
        with:
          target: 'x86_64-unknown-linux-gnu'
          enable-coverage: 'true'
          upload-results: 'false'

      - name: Generate coverage reports
        run: |
          llvm-cov show --show-directory-coverage \
            --format=html --output-dir=${OUTPUT_HTML_DIR} \
            -instr-profile=${PROFDATA_FILE} $(which solx)
          llvm-cov export --format=lcov -instr-profile=${PROFDATA_FILE} \
            $(which solx) > ./llvm/${LCOV_FILE}

      - name: Upload coverage artifacts
        uses: actions/upload-artifact@v4
        with:
          name: 'Coverage integration tests HTML'
          path: ${{ env.OUTPUT_HTML_DIR }}

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        if: (success() || failure())
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: 'lcov.info,llvm/codecov.lcov'
          slug: ${{ github.repository }}


  benchmarks:
    runs-on: matterlabs-ci-runner-high-performance
    container:
      image: ghcr.io/matter-labs/zksync-llvm-runner:latest
    strategy:
      fail-fast: false
      matrix:
        type: [ "reference", "candidate" ]
    env:
      BOOST_PREFIX: ${{ github.workspace }}/era-solidity/boost/lib
      SOLC_PREFIX: ${{ github.workspace }}/era-solidity/build
    steps:
      - name: Checkout
        uses: actions/checkout@v5
        with:
          submodules: recursive
          # TODO: uncomment before merging
          # ref: ${{ matrix.type == 'reference' && github.event.pull_request.base.sha || '' }}

      - name: Checkout submodules
        run: |
          git config --global --add safe.directory '*'
          git submodule update --init --force --depth=1 --recursive --checkout

      - name: Building solc
        uses: ./.github/actions/build-solc
        with:
          cmake-build-type: Release
          working-dir: 'era-solidity'
          upload-testing-binary: false
          build-type: ${{ matrix.type }}

      - name: Build LLVM
        uses: ./.github/actions/build-llvm
        with:
          build-type: 'Release'
          enable-assertions: false
          ccache-key: 'llvm-Linux-X64-gnu'

      - name: Build tester
        run: cargo build --release --bin solx-tester

      - name: Build solx
        run: cargo build --release --bin solx

      - name: Run benchmarks
        run: |          
          ./target/release/solx-tester \
            --solx ./target/release/solx \
            --benchmark=${{ matrix.type }}-benchmark.json || true

      - name: Upload results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: ${{ matrix.type }}-benchmark
          path: ${{ matrix.type }}-benchmark.json

  benchmark-comparison:
    runs-on: matterlabs-ci-runner-high-performance
    container:
      image: ghcr.io/matter-labs/zksync-llvm-runner:latest
    needs: benchmarks
    if: ${{ (failure() || success()) }}
    steps:
      - name: Checkout
        uses: actions/checkout@v5
        with:
          submodules: recursive

      - uses: actions/download-artifact@v4
        with:
          pattern: '*-benchmark'
          merge-multiple: true

      - name: Build converter
        run: cargo build --release --bin solx-benchmark-converter

      - name: Run benchmark converter
        run: |
          cat reference-benchmark.json \
            | jq '{data: ., project: "compiler-tester", toolchain: "reference"}' > reference.json
          cat candidate-benchmark.json \
            | jq '{data: ., project: "compiler-tester", toolchain: "candidate"}' > candidate.json
          ./target/release/solx-benchmark-converter --input-source compiler-tester \
            --output-path benchmarks.xlsx reference.json candidate.json

      - name: Upload Excel reports
        id: compiler-tester-excel-reports
        uses: actions/upload-artifact@v4
        with:
          name: excel-reports
          path: benchmarks.xlsx

      - name: Add PR comment with excel reports link
        uses: mshick/add-pr-comment@v2
        with:
          message-id: 'excel-reports'
          message: |
            üìä **Benchmarks Excel report**
            
            Benchmarks measured for:
            * candidate commit: ${{ github.sha }}
            * reference commit: ${{ github.event.pull_request.base.sha }}
            
            ‚û°Ô∏è [**Download Excel Report**](${{ steps.compiler-tester-excel-reports.outputs.artifact-url }})
