name: Foundry tests

on:
  pull_request:

permissions:
  contents: read
  pull-requests: write

# Cancel the workflow if any new changes pushed to a feature branch or the trunk
concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

defaults:
  run:
    shell: bash -ex {0}

jobs:

  build-solx:
    runs-on: matterlabs-ci-runner-high-performance
    container:
      image: ghcr.io/matter-labs/zksync-llvm-runner:latest
    steps:
      - name: Checkout source
        uses: actions/checkout@v4
        with:
          submodules: 'recursive'

      # This step is required to checkout submodules
      # that are disabled in .gitmodules config
      - name: Checkout submodules
        run: |
          git config --global --add safe.directory '*'
          git submodule update --force --depth=1 --recursive --checkout

      - name: Building solc
        uses: matter-labs/era-compiler-ci/.github/actions/build-solc@v1
        with:
          cmake-build-type: 'Release'
          working-dir: 'era-solidity'

      - name: Build LLVM
        uses: matter-labs/era-compiler-ci/.github/actions/build-llvm@v1
        with:
          clone-llvm: 'false'
          build-type: Release
          enable-assertions: 'false'
          ccache-key: ${{ format('llvm-{0}-{1}', runner.os, runner.arch) }}

      - name: Build solx
        uses: matter-labs/era-compiler-ci/.github/actions/build-rust@v1
        env:
          BOOST_PREFIX: ${{ github.workspace }}/era-solidity/boost/lib
          SOLC_PREFIX: ${{ github.workspace }}/era-solidity/build
        with:
          exec_name: 'solx'
          target: 'x86_64-unknown-linux-gnu'
          release-suffix: test


  test:
    needs: build-solx
    runs-on: matterlabs-ci-runner-high-performance
    container:
      image: ghcr.io/matter-labs/zksync-llvm-runner:latest
    outputs:
      solx-version: ${{ steps.solx.outputs.solx-version }}
      solx-llvm-version: ${{ steps.solx.outputs.solx-llvm-version }}
      solc-base-version: ${{ steps.solx.outputs.solc-base-version }}
    strategy:
      max-parallel: 6
      fail-fast: false
      matrix:
        project: [ 'solmate', 'solady', 'openzeppelin', 'forge-std', 'uniswap-v4', 'aave-v3', 'lil-web3', 'maple-erc20' ]
        compiler: [ 'solc', 'solx' ]
        via_ir: [ 'false' ]
    steps:
      - name: Checkout test suites
        uses: actions/checkout@v4
        with:
          repository: 'antonbaliasnikov/solidity-test-suite'
          submodules: 'recursive'

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: release*
          path: .

      - name: Move solx
        run: |
          mv release-test/test/solx* ./solx
          chmod a+x ./solx
          SOLX_VERSION=$(./solx --version | head -n 1)
          SOLX_SOLC_VERSION=$(./solx --version | tail -n 1 | grep -oE '[0-9]+\.[0-9]+\.[0-9]+')
          LLVM_VERSION=$(echo "${SOLX_VERSION}" | grep -oP "(?<=LLVM build: )[a-f0-9]{40}")
          echo "solx-version=${SOLX_VERSION}" >> ${GITHUB_OUTPUT}
          echo "solx-llvm-version=${LLVM_VERSION}" >> ${GITHUB_OUTPUT}
          echo "solc-base-version=${SOLX_SOLC_VERSION}" >> ${GITHUB_OUTPUT}

#      - name: Download solx
#        id: solx
#        run: |
#          wget --no-verbose https://github.com/matter-labs/solx/releases/download/0.1.0-alpha.2/solx-linux-amd64-gnu-v0.1.0-alpha.2
#          mv solx-linux-amd64-gnu-v0.1.0-alpha.2 ./solx
#          chmod a+x ./solx
#          ./solx --version
#          SOLX_VERSION=$(./solx --version | head -n 1)
#          SOLX_SOLC_VERSION=$(./solx --version | tail -n 1 | grep -oE '[0-9]+\.[0-9]+\.[0-9]+')
#          LLVM_VERSION=$(echo "${SOLX_VERSION}" | grep -oP "(?<=LLVM build: )[a-f0-9]{40}")
#          echo "solx-version=${SOLX_VERSION}" >> ${GITHUB_OUTPUT}
#          echo "solx-llvm-version=${LLVM_VERSION}" >> ${GITHUB_OUTPUT}
#          echo "solc-base-version=${SOLX_SOLC_VERSION}" >> ${GITHUB_OUTPUT}

      - name: Install foundry v0.3.0
        run: |
          curl -L https://foundry.paradigm.xyz | bash
          export PATH="$PATH:${HOME}/.foundry/bin"
          echo ${HOME}/.foundry/bin >> "${GITHUB_PATH}"
          foundryup -i 0.3.0

      - name: Patch pragmas
        working-directory: projects/${{ matrix.project }}
        run: |
          # Replace solidity version in all .sol files
          find . -name "*.sol" -type f -exec \
            sed -i 's/pragma solidity [0-9]\+\.[0-9]\+\.[0-9]\+/pragma solidity ${{ steps.solx.outputs.solc-base-version }}/g' {} +

      - name: Normalize project name
        run: |
          PROJECT="${{ matrix.project }}"
          echo "PROJECT=${PROJECT//\//-}" >> ${GITHUB_ENV}

      - name: Update compiler version in foundry.toml
        working-directory: projects/${{ matrix.project }}
        run: |
          # Fix config if required
          forge config --fix
          sed -i '/^\s*evm_version\s*=/d' foundry.toml
          sed -i 's/solc = ".*"/solc = "${{ steps.solx.outputs.solc-base-version }}"/' foundry.toml
          sed -i 's/solc_version = ".*"/solc_version = "${{ steps.solx.outputs.solc-base-version }}"/' foundry.toml

      - name: Build tests
        working-directory: projects/${{ matrix.project }}
        run: |          
          [ ${{ matrix.compiler }} == 'solx' ] && USE_SOLX="--use ${GITHUB_WORKSPACE}/solx"       
          BUILD_JSON="${GITHUB_WORKSPACE}/build_${PROJECT}-${{ matrix.compiler }}${{ matrix.via_ir == 'true' && '-via-ir' || '' }}.json"
          forge build ${USE_SOLX} ${{ matrix.via_ir == 'true' && '--via-ir' || '' }} --json > ${BUILD_JSON} 2>&1 || true
          FAILED_TESTS_TO_SKIP=$(jq -r '.errors[] | select(.type == "Error") | .sourceLocation.file' ${BUILD_JSON} | sed -E 's/:([^ ]+)//g')
          echo FAILED_TESTS_TO_SKIP=${FAILED_TESTS_TO_SKIP} | tee -a ${GITHUB_ENV}

      - name: Run tests
        working-directory: projects/${{ matrix.project }}
        run: |
          [ -n "${FAILED_TESTS_TO_SKIP}" ] && SKIP_TESTS="--skip ${FAILED_TESTS_TO_SKIP}"
          TEST_JSON="${GITHUB_WORKSPACE}/${PROJECT}${{ matrix.compiler == 'solc' && '-solc' || '' }}${{ matrix.via_ir == 'true' && '-via-ir' || '' }}.json"
          [ ${{ matrix.compiler }} == 'solx' ] && USE_SOLX="--use ${GITHUB_WORKSPACE}/solx"
          forge test --gas-report ${{ matrix.via_ir == 'true' && '--via-ir' || '' }} --json ${USE_SOLX} ${SKIP_TESTS} | tee -a "${TEST_JSON}" 2>&1

      - name: Upload json
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.PROJECT }}-${{ matrix.compiler }}${{ matrix.via_ir == 'true' && '-via-ir' || '' }}
          path: '*.json'


  analyze-results:
    runs-on: matterlabs-ci-runner-high-performance
    container:
      image: ghcr.io/matter-labs/zksync-llvm-runner:latest
    needs: test
    steps:

      - name: Download reports
        uses: actions/download-artifact@v4
        with:
          path: data
          merge-multiple: 'true'

      - name: Prepare compatibility table
        run: |
          echo "| Project     | Passed / Total | Progress       |" > report.md
          echo "|-------------|----------------|----------------|" >> report.md
          for PROJECT in solmate solady lil-web3 maple-erc20 openzeppelin forge-std aave-v3 uniswap-v4; do
            JSON=data/build_${PROJECT}-solx.json
            if [ ! -f "$JSON" ]; then
              echo "No data for ${PROJECT}"
              continue
            fi
            TOTAL=$(jq -r '.build_infos[0].source_id_to_path | length' "$JSON")
            FAILURES=$(jq -r '[.errors[] | select(.type == "Error")] | length' "$JSON")
            PASSED=$((TOTAL - FAILURES))
            PERCENT=$((PASSED * 100 / TOTAL))
            FILLED=$((PERCENT / 10))
            BAR=""
            for i in $(seq 1 10); do
              [ "$i" -le "$FILLED" ] && BAR+="ðŸŸ©" || BAR+="â¬œ"
            done
            printf "| %-11s | %4d / %4d   | %s %3d%% |\n" "${PROJECT}" "${PASSED}" "${TOTAL}" "${BAR}" "${PERCENT}" >> report.md
          done

      - name: Upload report
        uses: mshick/add-pr-comment@v2
        with:
          message-path: report.md
          message-id: 'compatibility-matrix'

      - name: Install LNT benchmark-converter
        run: |
          cargo install benchmark-analyzer --bin benchmark-converter \
            --git https://github.com/matter-labs/era-compiler-tester

      - name: Prepare LNT report
        run: |
          echo "{
            \"machine\": \"solx_benchmarks\",
            \"target\": \"evm\",
            \"toolchain\": \"ir_llvm\",
            \"compiler_version\": \"${{ needs.test.outputs.solx-version }} ${{ needs.test.outputs.solc-base-version }}\",
            \"llvm_version\": \"${{ needs.test.outputs.solx-llvm-version }}\"
          }" > "context.json"
          benchmark-converter \
            --input-paths ./data/solmate.json \
            --input-paths ./data/solady.json \
            --input-paths ./data/openzeppelin.json \
            --input-paths ./data/forge-std.json \
            --input-paths ./data/lil-web3.json \
            --input-paths ./data/maple-erc20.json \
            --benchmark-format json-lnt --benchmark-context context.json --output-path ./lnt-report
          mv ./lnt-report/* ./lnt-report/results.json

      - name: Upload LNT report
        uses: actions/upload-artifact@v4
        with:
          name: lnt-report
          path: './lnt-report/results.json'
